/*
 * Copyright Allo authors. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
#include <aie_api/aie.hpp>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <type_traits>
#include <math.h>
#define NOCPP


// --------- Sine LUT over [0, 2π] with linear interpolation ---------
constexpr float PI_F       = 3.14159265358979323846f;
constexpr float TWO_PI_F   = 6.28318530717958647692f;
constexpr float INV_TWO_PI = 1.0f / TWO_PI_F;

constexpr int SIN_LUT_SIZE = 257;
constexpr float SIN_STEP = TWO_PI_F / (SIN_LUT_SIZE - 1);


static const float SIN_LUT[SIN_LUT_SIZE] = {
0.00000000f, 0.02454123f, 0.04906767f, 0.07356456f, 0.09801714f, 0.12241068f, 0.14673047f, 0.17096189f, 
0.19509032f, 0.21910124f, 0.24298018f, 0.26671276f, 0.29028468f, 0.31368174f, 0.33688985f, 0.35989504f, 
0.38268343f, 0.40524131f, 0.42755509f, 0.44961133f, 0.47139674f, 0.49289819f, 0.51410274f, 0.53499762f, 
0.55557023f, 0.57580819f, 0.59569930f, 0.61523159f, 0.63439328f, 0.65317284f, 0.67155895f, 0.68954054f, 
0.70710678f, 0.72424708f, 0.74095113f, 0.75720885f, 0.77301045f, 0.78834643f, 0.80320753f, 0.81758481f, 
0.83146961f, 0.84485357f, 0.85772861f, 0.87008699f, 0.88192126f, 0.89322430f, 0.90398929f, 0.91420976f, 
0.92387953f, 0.93299280f, 0.94154407f, 0.94952818f, 0.95694034f, 0.96377607f, 0.97003125f, 0.97570213f, 
0.98078528f, 0.98527764f, 0.98917651f, 0.99247953f, 0.99518473f, 0.99729046f, 0.99879546f, 0.99969882f, 
1.00000000f, 0.99969882f, 0.99879546f, 0.99729046f, 0.99518473f, 0.99247953f, 0.98917651f, 0.98527764f, 
0.98078528f, 0.97570213f, 0.97003125f, 0.96377607f, 0.95694034f, 0.94952818f, 0.94154407f, 0.93299280f, 
0.92387953f, 0.91420976f, 0.90398929f, 0.89322430f, 0.88192126f, 0.87008699f, 0.85772861f, 0.84485357f, 
0.83146961f, 0.81758481f, 0.80320753f, 0.78834643f, 0.77301045f, 0.75720885f, 0.74095113f, 0.72424708f, 
0.70710678f, 0.68954054f, 0.67155895f, 0.65317284f, 0.63439328f, 0.61523159f, 0.59569930f, 0.57580819f, 
0.55557023f, 0.53499762f, 0.51410274f, 0.49289819f, 0.47139674f, 0.44961133f, 0.42755509f, 0.40524131f, 
0.38268343f, 0.35989504f, 0.33688985f, 0.31368174f, 0.29028468f, 0.26671276f, 0.24298018f, 0.21910124f, 
0.19509032f, 0.17096189f, 0.14673047f, 0.12241068f, 0.09801714f, 0.07356456f, 0.04906767f, 0.02454123f, 
0.00000000f, -0.02454123f, -0.04906767f, -0.07356456f, -0.09801714f, -0.12241068f, -0.14673047f, -0.17096189f, 
-0.19509032f, -0.21910124f, -0.24298018f, -0.26671276f, -0.29028468f, -0.31368174f, -0.33688985f, -0.35989504f, 
-0.38268343f, -0.40524131f, -0.42755509f, -0.44961133f, -0.47139674f, -0.49289819f, -0.51410274f, -0.53499762f, 
-0.55557023f, -0.57580819f, -0.59569930f, -0.61523159f, -0.63439328f, -0.65317284f, -0.67155895f, -0.68954054f, 
-0.70710678f, -0.72424708f, -0.74095113f, -0.75720885f, -0.77301045f, -0.78834643f, -0.80320753f, -0.81758481f, 
-0.83146961f, -0.84485357f, -0.85772861f, -0.87008699f, -0.88192126f, -0.89322430f, -0.90398929f, -0.91420976f, 
-0.92387953f, -0.93299280f, -0.94154407f, -0.94952818f, -0.95694034f, -0.96377607f, -0.97003125f, -0.97570213f, 
-0.98078528f, -0.98527764f, -0.98917651f, -0.99247953f, -0.99518473f, -0.99729046f, -0.99879546f, -0.99969882f, 
-1.00000000f, -0.99969882f, -0.99879546f, -0.99729046f, -0.99518473f, -0.99247953f, -0.98917651f, -0.98527764f, 
-0.98078528f, -0.97570213f, -0.97003125f, -0.96377607f, -0.95694034f, -0.94952818f, -0.94154407f, -0.93299280f, 
-0.92387953f, -0.91420976f, -0.90398929f, -0.89322430f, -0.88192126f, -0.87008699f, -0.85772861f, -0.84485357f, 
-0.83146961f, -0.81758481f, -0.80320753f, -0.78834643f, -0.77301045f, -0.75720885f, -0.74095113f, -0.72424708f, 
-0.70710678f, -0.68954054f, -0.67155895f, -0.65317284f, -0.63439328f, -0.61523159f, -0.59569930f, -0.57580819f, 
-0.55557023f, -0.53499762f, -0.51410274f, -0.49289819f, -0.47139674f, -0.44961133f, -0.42755509f, -0.40524131f, 
-0.38268343f, -0.35989504f, -0.33688985f, -0.31368174f, -0.29028468f, -0.26671276f, -0.24298018f, -0.21910124f, 
-0.19509032f, -0.17096189f, -0.14673047f, -0.12241068f, -0.09801714f, -0.07356456f, -0.04906767f, -0.02454123f, 
0.00000000f, };


static inline float mod2pi(float x) {
  float q = x * INV_TWO_PI;
  int n = (int)q;                 // trunc toward zero
  float r = x - (float)n * TWO_PI_F;

  if (r < 0.0f) r += TWO_PI_F;
  if (r >= TWO_PI_F) r -= TWO_PI_F;
  return r;
}

static inline float sin_lut2pi(float x) {
  float r = mod2pi(x);               // [0, 2π)
  constexpr int   SIN_LUT_SIZE = 257;
  constexpr float SIN_STEP     = TWO_PI_F / (SIN_LUT_SIZE - 1);

  float idx_f = r / SIN_STEP;        // [0, SIN_LUT_SIZE-1]
  int   i     = (int)idx_f;          // trunc
  float frac  = idx_f - (float)i;

  if (i >= SIN_LUT_SIZE - 1) { i = SIN_LUT_SIZE - 2; frac = 1.0f; }

  extern const float SIN_LUT[SIN_LUT_SIZE];
  float y0 = SIN_LUT[i];
  float y1 = SIN_LUT[i + 1];
  return y0 + frac * (y1 - y0);
}

extern "C" {

void sin_float32(float in_mat[32][64], float out_mat[32][64]) {
  constexpr int TILE_ROWS = 32;
  constexpr int SEQ_COLS  = 64;
  constexpr int VEC_SIZE  = 32;

  for (int r = 0; r < TILE_ROWS; ++r) {
    float* __restrict in_row  = &in_mat[r][0];
    float* __restrict out_row = &out_mat[r][0];

    aie::vector<float, VEC_SIZE> v0 = aie::load_v<VEC_SIZE>(in_row);
    aie::vector<float, VEC_SIZE> v1 = aie::load_v<VEC_SIZE>(in_row + VEC_SIZE);

    for (int k = 0; k < VEC_SIZE; ++k) {
      out_row[k]            = sin_lut2pi(v0[k]);
      out_row[VEC_SIZE + k] = sin_lut2pi(v1[k]);
    }
  }
}

} // extern "C"
